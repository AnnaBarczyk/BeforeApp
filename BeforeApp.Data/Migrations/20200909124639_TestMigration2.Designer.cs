// <auto-generated />
using System;
using BeforeApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeforeApp.Migrations
{
    [DbContext(typeof(BeforeAppContext))]
    [Migration("20200909124639_TestMigration2")]
    partial class TestMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeforeApp.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Moniker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.MusicGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.ToTable("MusicGenres");
                });

            modelBuilder.Entity("BeforeApp.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Orientation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.Artist", b =>
                {
                    b.HasBaseType("BeforeApp.Data.Person");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Artist");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.User", b =>
                {
                    b.HasBaseType("BeforeApp.Data.Person");

                    b.Property<int?>("EventId")
                        .HasColumnName("User_EventId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("BeforeApp.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.Event", b =>
                {
                    b.HasOne("BeforeApp.Data.Entities.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId");

                    b.HasOne("BeforeApp.Data.Person", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.MusicGenre", b =>
                {
                    b.HasOne("BeforeApp.Data.Entities.Event", null)
                        .WithMany("MusicGenres")
                        .HasForeignKey("EventId");

                    b.HasOne("BeforeApp.Data.Person", null)
                        .WithMany("MusicGenres")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.Artist", b =>
                {
                    b.HasOne("BeforeApp.Data.Entities.Event", null)
                        .WithMany("Artists")
                        .HasForeignKey("EventId");

                    b.HasOne("BeforeApp.Data.Entities.User", null)
                        .WithMany("Artists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BeforeApp.Data.Entities.User", b =>
                {
                    b.HasOne("BeforeApp.Data.Entities.Event", null)
                        .WithMany("UsersAttending")
                        .HasForeignKey("EventId");

                    b.HasOne("BeforeApp.Data.Person", null)
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
